options {
  JAVA_UNICODE_ESCAPE = true;
  DEBUG_PARSER = true;
}

PARSER_BEGIN(JavaParser)

import expressiontree.ir.*;
import expressiontree.utils.*;

public class JavaParser {

  public static void main(String args[]) {
    JavaParser parser;
    if (args.length == 0) {
      System.out.println("Java Parser Version 1.1:  Reading from standard input . . .");
      parser = new JavaParser(System.in);
    } else if (args.length == 1) {
      System.out.println("Java Parser Version 1.1:  Reading from file " + args[0] + " . . .");
      try {
        parser = new JavaParser(new java.io.FileInputStream(args[0]));
      } catch (java.io.FileNotFoundException e) {
        System.out.println("Java Parser Version 1.1:  File " + args[0] + " not found.");
        return;
      }
    } else {
      System.out.println("Java Parser Version 1.1:  Usage is one of:");
      System.out.println("         java JavaParser < inputfile");
      System.out.println("OR");
      System.out.println("         java JavaParser inputfile");
      return;
    }
    try {
      parser.CompilationUnit();
      System.out.println("Java Parser Version 1.1:  Java program parsed successfully.");
    } catch (ParseException e) {
      System.out.println(e.getMessage());
      System.out.println("Java Parser Version 1.1:  Encountered errors during parse.");
    }
  }

}

PARSER_END(JavaParser)


/* WHITE SPACE */

SKIP :
{
  " "
| "\t"
| "\n"
| "\r"
| "\f"
}

MORE :
{
  "//" : IN_SINGLE_LINE_COMMENT
}

<IN_SINGLE_LINE_COMMENT>
SPECIAL_TOKEN :
{
  <SINGLE_LINE_COMMENT: "\n" | "\r" | "\r\n" > : DEFAULT
}

<IN_SINGLE_LINE_COMMENT>
MORE :
{
  < ~[] >
}

/* RESERVED WORDS AND LITERALS */

TOKEN :
{
  < IF: "if" >
| < THEN: "then" >
| < ELSE: "else" >
| < END: "end" >
| < FALSE: "False" >
| < TRUE: "True" >
| < INT: "int" >
| < FLOAT: "float" >
| < BOOLEAN: "boolean" >
| < STRING: "String" >
| < FOR: "for" >
| < BEGIN: "begin" >
| < WHILE: "while" >
| < READ: "read" >
| < WRITE: "write" >
}

/* LITERALS */

TOKEN :
{
  < INTEGER_LITERAL: <DECIMAL_LITERAL> >
|
  < #DECIMAL_LITERAL: ["0"-"9"] (["0"-"9"])* >
|
  < FLOATING_POINT_LITERAL:
        (["0"-"9"])+ "." (["0"-"9"])* (<EXPONENT>)? (["f","F","d","D"])?
      | "." (["0"-"9"])+ (<EXPONENT>)? (["f","F","d","D"])?
      | (["0"-"9"])+ <EXPONENT> (["f","F","d","D"])?
      | (["0"-"9"])+ (<EXPONENT>)? ["f","F","d","D"]
  >
|
  < #EXPONENT: ["e","E"] (["+","-"])? (["0"-"9"])+ >
|
  < STRING_LITERAL:
      "\""
      (   (~["\"","\\","\n","\r"])
        | ("\\"
            ( ["n","t","b","r","f","\\","'","\""]
            | ["0"-"7"] ( ["0"-"7"] )?
            | ["0"-"3"] ["0"-"7"] ["0"-"7"]
            )
          )
      )*
      "\""
  >
}

/* IDENTIFIERS */

TOKEN :
{
  < IDENTIFIER: <LETTER> (<PART_LETTER>)* >
|
  < #LETTER:
      [  // all chars for which Character.isIdentifierStart is true
         "$",
         "A"-"Z",
         "_",
         "a"-"z"
      ]
  >
|
  < #PART_LETTER:
      [  // all chars for which Character.isIdentifierPart is true
         "\u0000"-"\u0008",
         "\u000e"-"\u001b",
         "$",
         "0"-"9",
         "A"-"Z",
         "_",
         "a"-"z"
      ]
  >
}

/* SEPARATORS */

TOKEN :
{
  < LPAREN: "(" >
| < RPAREN: ")" >
| < SEMICOLON: ";" >
| < COMMA: "," >
}

/* OPERATORS */

TOKEN :
{
  < ASSIGN: "=" >
| < GT: ">" >
| < LT: "<" >
| < BANG: "!" >
| < DOT: "." >
| < HOOK: "?" >
| < COLON: ":" >
| < EQ: "==" >
| < LE: "<=" >
| < GE: ">=" >
| < NE: "!=" >
| < SC_OR: "||" >
| < SC_AND: "&&" >
| < PLUS: "+" >
| < MINUS: "-" >
| < STAR: "*" >
| < SLASH: "/" >
| < REM: "%" >
}


/*****************************************
 * THE JAVA LANGUAGE GRAMMAR STARTS HERE *
 *****************************************/

/*
 * Program structuring syntax follows.
 */

Statement CompilationUnit() :
{
    Statement result;
}
{
  { result = new BlockStatement(); }
  ( { result.getStatements.add(Statement()); } )*
  <EOF>
  { return result; }
}

void PrimitiveType() :
{}
{
  "boolean"
|
  "int"
|
  "float"
|
  "String"
}

void Name() :
/*
 * A lookahead of 2 is required below since "Name" can be followed
 * by a ".*" when used in the context of an "ImportDeclaration".
 */
{}
{
  <IDENTIFIER>
}

void NameList() :
{}
{
  Name()
  ( "," Name() )*
}


/*
 * Expression syntax follows.
 */

void Expression() :
/*
 * This expansion has been written this way instead of:
 *   Assignment() | ConditionalExpression()
 * for performance reasons.
 * However, it is a weakening of the grammar for it allows the LHS of
 * assignments to be any conditional expression whereas it can only be
 * a primary expression.  Consider adding a semantic predicate to work
 * around this.
 */
{}
{
  ConditionalExpression()
  [
    AssignmentOperator() Expression()
  ]
}

void AssignmentOperator() :
{}
{
  "="
}

void ConditionalExpression() :
{}
{
  ExpressionWithStrings() [ "?" Expression() ":" ConditionalExpression() ]
}

void ExpressionWithStrings() :
{}
{
  LOOKAHEAD(2) StringConcatenationExpression() | ConditionalOrExpression()
}

void ConditionalOrExpression() :
{}
{
  ConditionalAndExpression() ( ("||" | ".") ConditionalAndExpression() )*
}

void ConditionalAndExpression() :
{}
{
  EqualityExpression() ( "&&" EqualityExpression() )*
}

void EqualityExpression() :
{}
{
  RelationalExpression() ( ( "==" | "!=" ) RelationalExpression() )*
}

void RelationalExpression() :
{}
{
  ( AdditiveExpression() ) ( ( "<" | ">" | "<=" | ">=" ) AdditiveExpression() )*
}

void StringConcatenationExpression() :
{}
{
  <STRING_LITERAL> ( "." <STRING_LITERAL> )+
}

Expression AdditiveExpression() :
{
    Token t;
    Expression result, left;
}
{
  result = MultiplicativeExpression() ( LOOKAHEAD(2) ( t = "+" | t = "-" ) right = MultiplicativeExpression() { result = new BinaryExpressioin(t.toString(), result, right); })*
  {return result;}
}

void MultiplicativeExpression() :
{}
{
  UnaryExpression() ( ( "*" | "/" | "%" ) UnaryExpression() )*
}

void UnaryExpression() :
{}
{
  ( "+" | "-" ) UnaryExpression()
|
  UnaryExpressionNotPlusMinus()
}

void UnaryExpressionNotPlusMinus() :
{}
{
  "!" UnaryExpression()
|
  PrimaryExpression()
}

void PrimaryExpression() :
{}
{
  PrimaryPrefix() //( LOOKAHEAD(2) PrimarySuffix() )*
}

void PrimaryPrefix() :
{}
{
  Literal()
|
  "(" Expression() ")"
|
  Name()
}

void ReadStatement() :
{}
{
  "read" PrimarySuffix()
}

void WriteStatement() :
{}
{
  "write" PrimarySuffix()
}

void PrimarySuffix() :
{}
{
  Arguments()
}

void Literal() :
{}
{
  <INTEGER_LITERAL>
|
  <FLOATING_POINT_LITERAL>
|
  <STRING_LITERAL>
|
  BooleanLiteral()
}

void BooleanLiteral() :
{}
{
  "True"
|
  "False"
}

void Arguments() :
{}
{
  [ ArgumentList() ] ";"
}

void ArgumentList() :
{}
{
  Expression() ( "," Expression() )*
}

/*
 * Statement syntax follows.
 */

void Statement() :
{}
{
  LOOKAHEAD(2)
  Block()
|
  EmptyStatement()
|
  StatementExpression() ";"
|
  IfStatement()
|
  ForStatement()
|
  ReadStatement()
|
  WriteStatement()
|
  LocalVariableDeclaration() ";"
//|
//  BreakStatement()
//|
//  ContinueStatement()
}

void Block() :
{}
{
  "begin" ( BlockStatement() )* "end"
}

void BlockStatement() :
{}
{
  LOOKAHEAD(PrimitiveType() <IDENTIFIER>)
  LocalVariableDeclaration() ";"
|
  Statement()
}

void LocalVariableDeclaration() :
{}
{
  PrimitiveType() VariableDeclarator() ( "," VariableDeclarator() )*
}

void EmptyStatement() :
{}
{
  ";"
}

void StatementExpression() :
/*
 * The last expansion of this production accepts more than the legal
 * Java expansions for StatementExpression.  This expansion does not
 * use PostfixExpression for performance reasons.
 */
{}
{
  PrimaryExpression()
  [
    AssignmentOperator() Expression()
  ]
}

void VariableDeclarator() :
{}
{
  VariableDeclaratorId() [ "=" VariableInitializer() ]
}

void VariableDeclaratorId() :
{}
{
  <IDENTIFIER>
}

void VariableInitializer() :
{}
{
  Expression()
}

void IfStatement() :
/*
 * The disambiguating algorithm of JavaCC automatically binds dangling
 * else's to the innermost if statement.  The LOOKAHEAD specification
 * is to tell JavaCC that we know what we are doing.
 */
{}
{
  "if" Expression() "then" Statement() [ LOOKAHEAD(1) "else" Statement() ] "end"
}

void ForStatement() :
{}
{
  "for" "(" [ ForInit() ] ";" [ Expression() ] ";" [ ForUpdate() ] ")" Statement()
}

void ForInit() :
{}
{
  LocalVariableDeclaration()
|
  StatementExpressionList()
}

void StatementExpressionList() :
{}
{
  StatementExpression() ( "," StatementExpression() )*
}

void ForUpdate() :
{}
{
  StatementExpressionList()
}

//void BreakStatement() :
//{}
//{
//  "break" [ <IDENTIFIER> ] ";"
//}
//
//void ContinueStatement() :
//{}
//{
//  "continue" [ <IDENTIFIER> ] ";"
//}
