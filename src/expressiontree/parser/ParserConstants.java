/* Generated By:JavaCC: Do not edit this line. ParserConstants.java */
package expressiontree.parser;


/**
 * Token literal values and constants.
 * Generated by org.javacc.parser.OtherFilesGen#start()
 */
public interface ParserConstants {

  /** End of File. */
  int EOF = 0;
  /** RegularExpression Id. */
  int SINGLE_LINE_COMMENT = 7;
  /** RegularExpression Id. */
  int INT = 9;
  /** RegularExpression Id. */
  int FLOAT = 10;
  /** RegularExpression Id. */
  int BOOLEAN = 11;
  /** RegularExpression Id. */
  int STRING = 12;
  /** RegularExpression Id. */
  int TRUE = 13;
  /** RegularExpression Id. */
  int FALSE = 14;
  /** RegularExpression Id. */
  int READ = 15;
  /** RegularExpression Id. */
  int PRINT = 16;
  /** RegularExpression Id. */
  int IF = 17;
  /** RegularExpression Id. */
  int THEN = 18;
  /** RegularExpression Id. */
  int ELSE = 19;
  /** RegularExpression Id. */
  int BEGIN = 20;
  /** RegularExpression Id. */
  int END = 21;
  /** RegularExpression Id. */
  int WHILE = 22;
  /** RegularExpression Id. */
  int FOR = 23;
  /** RegularExpression Id. */
  int DO = 24;
  /** RegularExpression Id. */
  int INTEGER_LITERAL = 25;
  /** RegularExpression Id. */
  int FLOATING_POINT_LITERAL = 26;
  /** RegularExpression Id. */
  int EXPONENT = 27;
  /** RegularExpression Id. */
  int STRING_LITERAL = 28;
  /** RegularExpression Id. */
  int IDENTIFIER = 29;
  /** RegularExpression Id. */
  int LETTER = 30;
  /** RegularExpression Id. */
  int PART_LETTER = 31;
  /** RegularExpression Id. */
  int LPAREN = 32;
  /** RegularExpression Id. */
  int RPAREN = 33;
  /** RegularExpression Id. */
  int SEMICOLON = 34;
  /** RegularExpression Id. */
  int COMMA = 35;
  /** RegularExpression Id. */
  int ASSIGN = 36;
  /** RegularExpression Id. */
  int GT = 37;
  /** RegularExpression Id. */
  int LT = 38;
  /** RegularExpression Id. */
  int BANG = 39;
  /** RegularExpression Id. */
  int DOT = 40;
  /** RegularExpression Id. */
  int HOOK = 41;
  /** RegularExpression Id. */
  int COLON = 42;
  /** RegularExpression Id. */
  int EQ = 43;
  /** RegularExpression Id. */
  int LE = 44;
  /** RegularExpression Id. */
  int GE = 45;
  /** RegularExpression Id. */
  int NE = 46;
  /** RegularExpression Id. */
  int SC_OR = 47;
  /** RegularExpression Id. */
  int SC_AND = 48;
  /** RegularExpression Id. */
  int PLUS = 49;
  /** RegularExpression Id. */
  int MINUS = 50;
  /** RegularExpression Id. */
  int STAR = 51;
  /** RegularExpression Id. */
  int SLASH = 52;
  /** RegularExpression Id. */
  int REM = 53;

  /** Lexical state. */
  int DEFAULT = 0;
  /** Lexical state. */
  int IN_SINGLE_LINE_COMMENT = 1;
  /** Lexical state. */
  int IN_FORMAL_COMMENT = 2;
  /** Lexical state. */
  int IN_MULTI_LINE_COMMENT = 3;

  /** Literal token values. */
  String[] tokenImage = {
    "<EOF>",
    "\" \"",
    "\"\\t\"",
    "\"\\n\"",
    "\"\\r\"",
    "\"\\f\"",
    "\"//\"",
    "<SINGLE_LINE_COMMENT>",
    "<token of kind 8>",
    "\"int\"",
    "\"float\"",
    "\"boolean\"",
    "\"String\"",
    "\"True\"",
    "\"False\"",
    "\"read\"",
    "\"print\"",
    "\"if\"",
    "\"then\"",
    "\"else\"",
    "\"begin\"",
    "\"end\"",
    "\"while\"",
    "\"for\"",
    "\"do\"",
    "<INTEGER_LITERAL>",
    "<FLOATING_POINT_LITERAL>",
    "<EXPONENT>",
    "<STRING_LITERAL>",
    "<IDENTIFIER>",
    "<LETTER>",
    "<PART_LETTER>",
    "\"(\"",
    "\")\"",
    "\";\"",
    "\",\"",
    "\"=\"",
    "\">\"",
    "\"<\"",
    "\"!\"",
    "\".\"",
    "\"?\"",
    "\":\"",
    "\"==\"",
    "\"<=\"",
    "\">=\"",
    "\"!=\"",
    "\"||\"",
    "\"&&\"",
    "\"+\"",
    "\"-\"",
    "\"*\"",
    "\"/\"",
    "\"%\"",
  };

}
