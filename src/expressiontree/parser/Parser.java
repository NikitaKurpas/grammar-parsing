/* Parser.java */
/* Generated By:JavaCC: Do not edit this line. Parser.java */
package expressiontree.parser;

import expressiontree.ir.*;
import expressiontree.utils.*;

public class Parser implements ParserConstants {

    private SymbolTable table = new SymbolTable();

    public static void main(String args[]) {
        Parser parser;
        if (args.length == 0) {
          System.out.println("Parser Version 1.0:  Reading from standard input . . .");
          parser = new Parser(System.in);
        } else if (args.length == 1) {
          System.out.println("Parser Version 1.0:  Reading from file " + args[0] + " . . .");
          try {
            parser = new Parser(new java.io.FileInputStream(args[0]));
          } catch (java.io.FileNotFoundException e) {
            System.out.println("Parser Version 1.0:  File " + args[0] + " not found.");
            return;
          }
        } else {
          System.out.println("Parser Version 1.0:  Usage is one of:");
          System.out.println("         java Parser < inputfile");
          System.out.println("OR");
          System.out.println("         java Parser inputfile");
          return;
        }
        try {
          BlockOfStatements bos = parser.start();
          IRVisitor visitor = new NicePrintingVisitor();
          bos.accept(visitor);
          System.out.println(visitor.toString());
          System.out.println("Parser Version 1.0:  program parsed successfully.");
        } catch (ParseException e) {
          System.out.println(e.getMessage());
          System.out.println("Parser Version 1.0:  Encountered errors during parse.");
        }
      }

  final public BlockOfStatements start() throws ParseException {BlockOfStatements result;
    result = block();
    jj_consume_token(0);
{if ("" != null) return result;}
    throw new Error("Missing return statement in function");
  }

  final public BlockOfStatements block() throws ParseException {BlockOfStatements bofs = new BlockOfStatements();
    Statement s;
    label_1:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case INT:
      case FLOAT:
      case BOOLEAN:
      case STRING:
      case READ:
      case PRINT:
      case IF:
      case WHILE:
      case IDENTIFIER:
      case SEMICOLON:{
        ;
        break;
        }
      default:
        jj_la1[0] = jj_gen;
        break label_1;
      }
      s = statement();
if (s!=null) bofs.getStatements().add(s);
    }
{if ("" != null) return bofs;}
    throw new Error("Missing return statement in function");
  }

  final public Statement statement() throws ParseException {Statement s = null;
    BlockOfStatements b1=null, b2=null;
    Token t;
    Token ident;
    Expression e;
    Variable v;
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case SEMICOLON:{
      jj_consume_token(SEMICOLON);
      break;
      }
    case INT:
    case FLOAT:
    case BOOLEAN:
    case STRING:{
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case INT:{
        t = jj_consume_token(INT);
        break;
        }
      case FLOAT:{
        t = jj_consume_token(FLOAT);
        break;
        }
      case BOOLEAN:{
        t = jj_consume_token(BOOLEAN);
        break;
        }
      case STRING:{
        t = jj_consume_token(STRING);
        break;
        }
      default:
        jj_la1[1] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
      ident = jj_consume_token(IDENTIFIER);
table.save(new Variable(ident.toString()));
      label_2:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
        case COMMA:{
          ;
          break;
          }
        default:
          jj_la1[2] = jj_gen;
          break label_2;
        }
        jj_consume_token(COMMA);
        ident = jj_consume_token(IDENTIFIER);
table.save(new Variable(ident.toString()));
      }
      jj_consume_token(SEMICOLON);
      break;
      }
    case IDENTIFIER:{
      ident = jj_consume_token(IDENTIFIER);
      jj_consume_token(ASSIGN);
      e = expr();
      jj_consume_token(SEMICOLON);
v = table.load(ident.toString());
            if (v!=null) s = new AssignmentStatement(v, e);
      break;
      }
    case PRINT:{
      jj_consume_token(PRINT);
      e = expr();
s = new PrintStatement();
            ((PrintStatement)s).getExpressions().add(e);
      label_3:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
        case COMMA:{
          ;
          break;
          }
        default:
          jj_la1[3] = jj_gen;
          break label_3;
        }
        jj_consume_token(COMMA);
        e = expr();
((PrintStatement)s).getExpressions().add(e);
      }
      jj_consume_token(SEMICOLON);
      break;
      }
    case READ:{
      jj_consume_token(READ);
      ident = jj_consume_token(IDENTIFIER);
s = new ReadStatement();
            v = table.load(ident.toString());
            if (v!=null) ((ReadStatement)s).getVariables().add(v);
      label_4:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
        case COMMA:{
          ;
          break;
          }
        default:
          jj_la1[4] = jj_gen;
          break label_4;
        }
        jj_consume_token(COMMA);
        ident = jj_consume_token(IDENTIFIER);
v = table.load(ident.toString());
            if (v!=null) ((ReadStatement)s).getVariables().add(v);
      }
      jj_consume_token(SEMICOLON);
      break;
      }
    case IF:{
      jj_consume_token(IF);
      e = expr();
      jj_consume_token(THEN);
      b1 = block();
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case ELSE:{
        jj_consume_token(ELSE);
        b2 = block();
        break;
        }
      default:
        jj_la1[5] = jj_gen;
        ;
      }
      jj_consume_token(END);
      jj_consume_token(SEMICOLON);
s=new IfStatement(e,b1,b2);
      break;
      }
    case WHILE:{
      jj_consume_token(WHILE);
      e = expr();
      jj_consume_token(DO);
      b1 = block();
      jj_consume_token(END);
      jj_consume_token(SEMICOLON);
s=new WhileStatement(e,b1);
      break;
      }
    default:
      jj_la1[6] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
{if ("" != null) return s;}
    throw new Error("Missing return statement in function");
  }

/*
 * Expression syntax follows.
 */
  final public 
Expression expr() throws ParseException {Expression e;
    e = ConditionalExpression();
{if ("" != null) return e;}
    throw new Error("Missing return statement in function");
  }

  final public Expression ConditionalExpression() throws ParseException {Expression e, tmp1, tmp2;
    e = ConditionalOrExpression();
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case HOOK:{
      jj_consume_token(HOOK);
      tmp1 = expr();
      jj_consume_token(COLON);
      tmp2 = ConditionalExpression();
e = new TernaryExpression(e,tmp1,tmp2);
      break;
      }
    default:
      jj_la1[7] = jj_gen;
      ;
    }
{if ("" != null) return e;}
    throw new Error("Missing return statement in function");
  }

  final public Expression ConditionalOrExpression() throws ParseException {Expression e,tmp;
    e = ConditionalAndExpression();
    label_5:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case SC_OR:{
        ;
        break;
        }
      default:
        jj_la1[8] = jj_gen;
        break label_5;
      }
      jj_consume_token(SC_OR);
      tmp = ConditionalAndExpression();
e = new BinaryExpression(e, "||", tmp);
    }
{if ("" != null) return e;}
    throw new Error("Missing return statement in function");
  }

  final public Expression ConditionalAndExpression() throws ParseException {Expression e,tmp;
    e = RelationalExpression();
    label_6:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case SC_AND:{
        ;
        break;
        }
      default:
        jj_la1[9] = jj_gen;
        break label_6;
      }
      jj_consume_token(SC_AND);
      tmp = RelationalExpression();
e=new BinaryExpression(e,"&&", tmp);
    }
{if ("" != null) return e;}
    throw new Error("Missing return statement in function");
  }

  final public Expression RelationalExpression() throws ParseException {Expression e,tmp;
    Token t;
    e = AdditiveExpression();
    label_7:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case GT:
      case LT:
      case EQ:
      case LE:
      case GE:
      case NE:{
        ;
        break;
        }
      default:
        jj_la1[10] = jj_gen;
        break label_7;
      }
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case EQ:{
        t = jj_consume_token(EQ);
        break;
        }
      case NE:{
        t = jj_consume_token(NE);
        break;
        }
      case LT:{
        t = jj_consume_token(LT);
        break;
        }
      case GT:{
        t = jj_consume_token(GT);
        break;
        }
      case LE:{
        t = jj_consume_token(LE);
        break;
        }
      case GE:{
        t = jj_consume_token(GE);
        break;
        }
      default:
        jj_la1[11] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
      tmp = AdditiveExpression();
e = new BinaryExpression(e,t.toString(),tmp);
    }
{if ("" != null) return e;}
    throw new Error("Missing return statement in function");
  }

  final public Expression AdditiveExpression() throws ParseException {Expression e,tmp;
    Token t;
    e = MultiplicativeExpression();
    label_8:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case DOT:
      case PLUS:
      case MINUS:{
        ;
        break;
        }
      default:
        jj_la1[12] = jj_gen;
        break label_8;
      }
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case PLUS:{
        t = jj_consume_token(PLUS);
        break;
        }
      case MINUS:{
        t = jj_consume_token(MINUS);
        break;
        }
      case DOT:{
        t = jj_consume_token(DOT);
        break;
        }
      default:
        jj_la1[13] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
      tmp = MultiplicativeExpression();
e = new BinaryExpression(e,t.toString(),tmp);
    }
{if ("" != null) return e;}
    throw new Error("Missing return statement in function");
  }

  final public Expression MultiplicativeExpression() throws ParseException {Expression e,tmp;
    Token t;
    e = UnaryExpression();
    label_9:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case STAR:
      case SLASH:
      case REM:{
        ;
        break;
        }
      default:
        jj_la1[14] = jj_gen;
        break label_9;
      }
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case STAR:{
        t = jj_consume_token(STAR);
        break;
        }
      case SLASH:{
        t = jj_consume_token(SLASH);
        break;
        }
      case REM:{
        t = jj_consume_token(REM);
        break;
        }
      default:
        jj_la1[15] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
      tmp = UnaryExpression();
e=new BinaryExpression(e,t.toString(),tmp);
    }
{if ("" != null) return e;}
    throw new Error("Missing return statement in function");
  }

  final public Expression UnaryExpression() throws ParseException {Expression e;
    Token t;
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case BANG:
    case PLUS:
    case MINUS:{
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case PLUS:{
        t = jj_consume_token(PLUS);
        break;
        }
      case MINUS:{
        t = jj_consume_token(MINUS);
        break;
        }
      case BANG:{
        t = jj_consume_token(BANG);
        break;
        }
      default:
        jj_la1[16] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
      e = Literal();
e=new UnaryExpression(t.toString(), e);
      break;
      }
    case TRUE:
    case FALSE:
    case INTEGER_LITERAL:
    case FLOATING_POINT_LITERAL:
    case STRING_LITERAL:
    case IDENTIFIER:
    case LPAREN:{
      e = Literal();
      break;
      }
    default:
      jj_la1[17] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
{if ("" != null) return e;}
    throw new Error("Missing return statement in function");
  }

  final public Expression Literal() throws ParseException {Expression e;
    Token t;
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case INTEGER_LITERAL:{
      t = jj_consume_token(INTEGER_LITERAL);
e = new Constant(Integer.decode(t.toString()), Type.INT);
      break;
      }
    case FLOATING_POINT_LITERAL:{
      t = jj_consume_token(FLOATING_POINT_LITERAL);
e = new Constant(Double.parseDouble(t.toString()), Type.FLOAT);
      break;
      }
    case STRING_LITERAL:{
      t = jj_consume_token(STRING_LITERAL);
e = new Constant(t.toString(), Type.STRING);
      break;
      }
    case TRUE:{
      t = jj_consume_token(TRUE);
e = new Constant(true, Type.BOOLEAN);
      break;
      }
    case FALSE:{
      t = jj_consume_token(FALSE);
e = new Constant(false, Type.BOOLEAN);
      break;
      }
    case IDENTIFIER:{
      t = jj_consume_token(IDENTIFIER);
e=table.load(t.toString());
      break;
      }
    case LPAREN:{
      jj_consume_token(LPAREN);
      e = expr();
      jj_consume_token(RPAREN);
      break;
      }
    default:
      jj_la1[18] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
{if ("" != null) return e;}
    throw new Error("Missing return statement in function");
  }

  /** Generated Token Manager. */
  public ParserTokenManager token_source;
  SimpleCharStream jj_input_stream;
  /** Current token. */
  public Token token;
  /** Next token. */
  public Token jj_nt;
  private int jj_ntk;
  private int jj_gen;
  final private int[] jj_la1 = new int[19];
  static private int[] jj_la1_0;
  static private int[] jj_la1_1;
  static {
      jj_la1_init_0();
      jj_la1_init_1();
   }
   private static void jj_la1_init_0() {
      jj_la1_0 = new int[] {0x8239e00,0x1e00,0x0,0x0,0x0,0x80000,0x8239e00,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x4d806000,0x4d806000,};
   }
   private static void jj_la1_init_1() {
      jj_la1_1 = new int[] {0x1,0x0,0x2,0x2,0x2,0x0,0x1,0x80,0x2000,0x4000,0x1e18,0x1e18,0x18040,0x18040,0xe0000,0xe0000,0x18020,0x18020,0x0,};
   }

  /** Constructor with InputStream. */
  public Parser(java.io.InputStream stream) {
     this(stream, null);
  }
  /** Constructor with InputStream and supplied encoding */
  public Parser(java.io.InputStream stream, String encoding) {
    try { jj_input_stream = new SimpleCharStream(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
    token_source = new ParserTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 19; i++) jj_la1[i] = -1;
  }

  /** Reinitialise. */
  public void ReInit(java.io.InputStream stream) {
     ReInit(stream, null);
  }
  /** Reinitialise. */
  public void ReInit(java.io.InputStream stream, String encoding) {
    try { jj_input_stream.ReInit(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 19; i++) jj_la1[i] = -1;
  }

  /** Constructor. */
  public Parser(java.io.Reader stream) {
    jj_input_stream = new SimpleCharStream(stream, 1, 1);
    token_source = new ParserTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 19; i++) jj_la1[i] = -1;
  }

  /** Reinitialise. */
  public void ReInit(java.io.Reader stream) {
    jj_input_stream.ReInit(stream, 1, 1);
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 19; i++) jj_la1[i] = -1;
  }

  /** Constructor with generated Token Manager. */
  public Parser(ParserTokenManager tm) {
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 19; i++) jj_la1[i] = -1;
  }

  /** Reinitialise. */
  public void ReInit(ParserTokenManager tm) {
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 19; i++) jj_la1[i] = -1;
  }

  private Token jj_consume_token(int kind) throws ParseException {
    Token oldToken;
    if ((oldToken = token).next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    if (token.kind == kind) {
      jj_gen++;
      return token;
    }
    token = oldToken;
    jj_kind = kind;
    throw generateParseException();
  }


/** Get the next Token. */
  final public Token getNextToken() {
    if (token.next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    jj_gen++;
    return token;
  }

/** Get the specific Token. */
  final public Token getToken(int index) {
    Token t = token;
    for (int i = 0; i < index; i++) {
      if (t.next != null) t = t.next;
      else t = t.next = token_source.getNextToken();
    }
    return t;
  }

  private int jj_ntk_f() {
    if ((jj_nt=token.next) == null)
      return (jj_ntk = (token.next=token_source.getNextToken()).kind);
    else
      return (jj_ntk = jj_nt.kind);
  }

  private java.util.List<int[]> jj_expentries = new java.util.ArrayList<int[]>();
  private int[] jj_expentry;
  private int jj_kind = -1;

  /** Generate ParseException. */
  public ParseException generateParseException() {
    jj_expentries.clear();
    boolean[] la1tokens = new boolean[52];
    if (jj_kind >= 0) {
      la1tokens[jj_kind] = true;
      jj_kind = -1;
    }
    for (int i = 0; i < 19; i++) {
      if (jj_la1[i] == jj_gen) {
        for (int j = 0; j < 32; j++) {
          if ((jj_la1_0[i] & (1<<j)) != 0) {
            la1tokens[j] = true;
          }
          if ((jj_la1_1[i] & (1<<j)) != 0) {
            la1tokens[32+j] = true;
          }
        }
      }
    }
    for (int i = 0; i < 52; i++) {
      if (la1tokens[i]) {
        jj_expentry = new int[1];
        jj_expentry[0] = i;
        jj_expentries.add(jj_expentry);
      }
    }
    int[][] exptokseq = new int[jj_expentries.size()][];
    for (int i = 0; i < jj_expentries.size(); i++) {
      exptokseq[i] = jj_expentries.get(i);
    }
    return new ParseException(token, exptokseq, tokenImage);
  }

  /** Enable tracing. */
  final public void enable_tracing() {
  }

  /** Disable tracing. */
  final public void disable_tracing() {
  }

}
